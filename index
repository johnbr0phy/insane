<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>INSANE Interactive Visualizer</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000000;
            color: white;
            font-family: sans-serif;
        }
        canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            display:block;
            color: rgba(255, 255, 255, 0.75);
            text-shadow: 0 0 5px #ffffff;
        }
    </style>
</head>
<body>
    <div id="info">INSANE Interactive Visualizer<br/>Move mouse to interact, drag to rotate</div>

    <!-- Import map for Three.js modules from CDN -->
    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.161.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@0.161.0/examples/jsm/"
            }
        }
    </script>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
        import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
        import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
        // import { OutputPass } from 'three/addons/postprocessing/OutputPass.js'; // Usually needed, included in UnrealBloomPass/RenderPass for basic setup

        let scene, camera, renderer, composer;
        let controls;
        let objects = [];
        let particles;
        let clock = new THREE.Clock();
        let raycaster = new THREE.Raycaster();
        let pointer = new THREE.Vector2();
        let intersectedObject = null;
        const INTERSECTED_SCALE = 1.8;
        const NORMAL_SCALE = 1.0;

        // --- Parameters ---
        const objectCount = 300;
        const spawnRadius = 15;
        const particleCount = 5000;
        const bloomParams = {
            threshold: 0.1, // Lower = more bloom
            strength: 1.2,  // How strong the bloom is
            radius: 0.5     // How far the bloom spreads
        };
        // ------------------

        init();
        animate();

        function init() {
            // --- Scene ---
            scene = new THREE.Scene();
            scene.fog = new THREE.FogExp2(0x000000, 0.03); // Add some depth fog

            // --- Camera ---
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 30;

            // --- Renderer ---
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.toneMapping = THREE.ReinhardToneMapping; // Better handling of bright areas with bloom
            document.body.appendChild(renderer.domElement);

            // --- Controls ---
            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true; // Smooth camera movement
            controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false;
            controls.minDistance = 5;
            controls.maxDistance = 70;
            controls.autoRotate = true; // Keep it moving!
            controls.autoRotateSpeed = 0.4;

            // --- Lighting ---
            const ambientLight = new THREE.AmbientLight(0x606060); // Soft ambient light
            scene.add(ambientLight);

            const pointLight1 = new THREE.PointLight(0xff88ff, 1.5, 100, 2); // Pinkish light
            pointLight1.position.set(15, 20, 15);
            scene.add(pointLight1);

            const pointLight2 = new THREE.PointLight(0x88ffff, 1.5, 100, 2); // Cyannish light
            pointLight2.position.set(-15, -10, -10);
            scene.add(pointLight2);

            const dirLight = new THREE.DirectionalLight(0xffffff, 0.5); // White directional light
            dirLight.position.set(5, 5, 5);
            scene.add(dirLight);


            // --- Geometries & Materials ---
            const geometries = [
                new THREE.BoxGeometry(1, 1, 1),
                new THREE.SphereGeometry(0.7, 32, 16),
                new THREE.IcosahedronGeometry(0.8, 0),
                new THREE.TorusKnotGeometry(0.6, 0.2, 100, 16),
                new THREE.ConeGeometry(0.6, 1.2, 32),
                new THREE.TorusGeometry(0.7, 0.2, 16, 100)
            ];

            const materials = [];
            for (let i = 0; i < 10; i++) { // Create a pool of vibrant materials
                 materials.push(new THREE.MeshStandardMaterial({
                    color: new THREE.Color().setHSL(Math.random(), 0.8, 0.6), // Random vibrant hue
                    roughness: Math.random() * 0.5 + 0.2, // Moderately shiny
                    metalness: Math.random() * 0.5 + 0.1, // Slightly metallic
                    emissive: 0x000000, // Will be changed on hover
                    // wireframe: Math.random() > 0.9 // Occasional wireframe
                }));
            }


            // --- Create Objects ---
            for (let i = 0; i < objectCount; i++) {
                const geometry = geometries[Math.floor(Math.random() * geometries.length)];
                const material = materials[Math.floor(Math.random() * materials.length)].clone(); // Clone to allow unique emissive later
                const mesh = new THREE.Mesh(geometry, material);

                // Random position within a sphere
                const phi = Math.acos(-1 + (2 * Math.random()));
                const theta = Math.sqrt(4 * Math.PI) * Math.random(); // More uniform distribution
                mesh.position.set(
                    spawnRadius * Math.sin(phi) * Math.cos(theta),
                    spawnRadius * Math.sin(phi) * Math.sin(theta),
                    spawnRadius * Math.cos(phi)
                );

                // Random rotation & scale
                mesh.rotation.set(Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2);
                const scale = Math.random() * 0.5 + 0.5; // Varying sizes
                mesh.scale.set(scale, scale, scale);

                // Store original properties for animation/interaction
                mesh.userData.originalScale = scale;
                mesh.userData.baseRotationSpeed = new THREE.Vector3(
                    (Math.random() - 0.5) * 0.02,
                    (Math.random() - 0.5) * 0.02,
                    (Math.random() - 0.5) * 0.02
                );
                mesh.userData.oscillationOffset = Math.random() * Math.PI * 2; // For sine wave movement

                scene.add(mesh);
                objects.push(mesh);
            }


             // --- Particles ---
            const particleGeometry = new THREE.BufferGeometry();
            const positions = [];
            const colors = [];
            const baseColor = new THREE.Color();

            for (let i = 0; i < particleCount; i++) {
                const vertex = new THREE.Vector3(
                    (Math.random() - 0.5) * spawnRadius * 3,
                    (Math.random() - 0.5) * spawnRadius * 3,
                    (Math.random() - 0.5) * spawnRadius * 3
                );
                positions.push(vertex.x, vertex.y, vertex.z);

                // Assign a color based on position or randomly
                 baseColor.setHSL(Math.random() * 0.2 + 0.55, 0.8, 0.6); // Blues/Purples/Pinks
                 colors.push(baseColor.r, baseColor.g, baseColor.b);
            }

            particleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
            particleGeometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));

            const particleMaterial = new THREE.PointsMaterial({
                size: 0.15,
                vertexColors: true,
                blending: THREE.AdditiveBlending, // Bright, glowing particles
                transparent: true,
                opacity: 0.8,
                sizeAttenuation: true, // Particles smaller further away
                depthWrite: false // Prevent particles blocking each other weirdly
            });

            particles = new THREE.Points(particleGeometry, particleMaterial);
            scene.add(particles);

            // --- Post-processing (Bloom) ---
            const renderScene = new RenderPass(scene, camera);

            const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
            bloomPass.threshold = bloomParams.threshold;
            bloomPass.strength = bloomParams.strength;
            bloomPass.radius = bloomParams.radius;

            composer = new EffectComposer(renderer);
            composer.addPass(renderScene);
            composer.addPass(bloomPass);

            // Add OutputPass if needed (usually handled by default setup)
            // const outputPass = new OutputPass();
            // composer.addPass(outputPass);


            // --- Event Listeners ---
            window.addEventListener('resize', onWindowResize);
            window.addEventListener('pointermove', onPointerMove); // Use pointermove for broader device support
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            composer.setSize(window.innerWidth, window.innerHeight); // Resize composer too!
        }

        function onPointerMove(event) {
            // Calculate pointer position in normalized device coordinates (-1 to +1) for both components
            pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
            pointer.y = - (event.clientY / window.innerHeight) * 2 + 1;
        }

        function animate() {
            requestAnimationFrame(animate);

            const delta = clock.getDelta();
            const elapsed = clock.getElapsedTime();

            controls.update(); // Only required if controls.enableDamping = true or autoRotate = true

            // --- Object Animation ---
            objects.forEach(obj => {
                // Base rotation
                obj.rotation.x += obj.userData.baseRotationSpeed.x;
                obj.rotation.y += obj.userData.baseRotationSpeed.y;
                obj.rotation.z += obj.userData.baseRotationSpeed.z;

                // Add subtle oscillation
                 obj.position.y += Math.sin(elapsed * 0.5 + obj.userData.oscillationOffset) * 0.005;
                 obj.position.x += Math.cos(elapsed * 0.3 + obj.userData.oscillationOffset) * 0.005;
            });

             // --- Particle Animation ---
            particles.rotation.y += delta * 0.05;
            // Could also animate individual particle positions here for more complex effects (more performance intensive)


            // --- Raycasting for Interaction ---
            raycaster.setFromCamera(pointer, camera);
            const intersects = raycaster.intersectObjects(objects); // Check intersection with our shapes

            // Reset previous intersected object if it's no longer intersected
            if (intersectedObject && !intersects.find(i => i.object === intersectedObject)) {
                 // Lerp scale back to normal
                 intersectedObject.scale.lerp(
                    new THREE.Vector3().setScalar(intersectedObject.userData.originalScale),
                    0.1 // Smoothing factor
                 );

                 // Fade out emissive color
                 intersectedObject.material.emissive.lerp(new THREE.Color(0x000000), 0.1);

                intersectedObject = null;
            }

            // Handle new intersection
            if (intersects.length > 0) {
                const firstIntersect = intersects[0].object;

                if (intersectedObject !== firstIntersect) {
                    intersectedObject = firstIntersect;
                    // Store original color if needed, or just set target emissive
                    intersectedObject.userData.originalEmissive = intersectedObject.material.emissive.clone();
                }

                // Lerp scale up
                 intersectedObject.scale.lerp(
                    new THREE.Vector3().setScalar(intersectedObject.userData.originalScale * INTERSECTED_SCALE),
                    0.1 // Smoothing factor
                );

                 // Lerp emissive color to bright white (or a specific color)
                 intersectedObject.material.emissive.lerp(new THREE.Color(0xffffff), 0.1);
            }


            // --- Render ---
            // renderer.render(scene, camera); // Use composer instead for post-processing
            composer.render(delta);
        }

    </script>
</body>
</html>
